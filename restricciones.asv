function [g] = restricciones(w)
% Restricciones de desigualdad para el problema geométrico
% IN
%   w: vector de 2(n-1) con coordenadas polares de vértices del polígono
% OUT
%   g: vector de n(n-1)/2 con las restricciones
% Optimización numérica 2020
% 24.nov.20

[dimension2, ~] = size(w);
n = floor( dimension2/2 ) + 1;

gx = [];
gth1 = [];
gth2 = [];
gth3 = [];
gth4 = [];
gth5 = [];

gx = w(1:(n-1)).*w(1:(n-1)) - 0.3;
gx = [gx; 1 - w(1:(n-1)).*w(1:(n-1)) ];



for k = 1:( n - 1 )
    rk = w( k );  % el vector esta dividido, las primeras son los modulos
    thetak = w( (n-1)+k ); % los segundos son los angulos
    
    if (k ~= (n-1))
        for i = (k+1):(n-1)
            ri = w( i );
            thetai = w( (n-1) + i );
            aux = rk * rk + ri * ri - 2 * rk * ri * cos( thetak - thetai );
            gx = [gx; 1-aux];
            gx = [gx; aux - 0.4]; % que nunca un punto se junte con el otro
        end
        gth1 = [gth1; w( n + k ) - thetak];
    end
    
  
    gth2 = [gth2; thetak];
    gth3 = [gth3; pi - thetak];
    gth4 = [gth4; rk];
    gth5 = [gth5; 1 - rk];
    
end


g = [ gx ; gth1 ; gth2 ; gth3 ; gth4 ; gth5 ];




n = length(x)/2;
% Le agregamos el punto inicial
W = [ w(1:n) ; pi ; w(n+1:2*n) ;0 ];

n = length(W)/2;

% Inicializamos las variables
gx = zeros(0.5*(n*(n-1)),1);
gx = zeros(0.5*(n*(n-1)),1);
gth = zeros(n-1,1);
rlim = zeros(4*n,1);

th = W(1:n); 
r = W(n+1:2*n);

for i=1:n-1
    for j=i+1:n
        gx(i*(n-1)+j) = 1 - ...
            (r(i)^2 + r(j)^2 - 2*r(i)*r(j)*cos(th(i) - th(j)));
    end
end

for i=1:n-1
    gth(i) = th(i+1) - th(i);
end

rlim(1:2*n) = W;
rlim(2*n+1:3*n) = pi - th;
rlim(3*n+1:4*n) = 1 - r;

gx = [-gx
    -gth
    -rlim];






end